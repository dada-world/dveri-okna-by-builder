
import { useState } from "react";
import { toast } from "@/components/ui/use-toast";
import WindowConfigurationItem from "./WindowConfigurationItem";
import ContactInfoForm from "./ContactInfoForm";

interface WindowConfig {
  windowType: string;
  frameTypes: string[];
  dimensions: { width: string; height: string };
  options: string[];
}

interface ContactInfo {
  name: string;
  phone: string;
  consent: boolean;
}

const WindowConfigurationForm = () => {
  const [windows, setWindows] = useState<WindowConfig[]>([{
    windowType: "",
    frameTypes: [],
    dimensions: { width: "", height: "" },
    options: []
  }]);
  const [contactInfo, setContactInfo] = useState<ContactInfo>({ name: "", phone: "", consent: false });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleWindowChange = (index: number, updatedWindow: WindowConfig) => {
    const updatedWindows = [...windows];
    updatedWindows[index] = updatedWindow;
    setWindows(updatedWindows);
  };

  const handleContactInfoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setContactInfo({
      ...contactInfo,
      [name]: type === "checkbox" ? checked : value
    });
  };
  
  const addWindow = () => {
    setWindows([...windows, {
      windowType: "",
      frameTypes: [],
      dimensions: { width: "", height: "" },
      options: []
    }]);
  };

  const formatWindowsData = () => {
    return windows.map((window, index) => {
      const windowTypeNames = {
        "one-leaf": "–û–¥–Ω–æ—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ –æ–∫–Ω–æ",
        "two-leaf": "–î–≤—É—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ –æ–∫–Ω–æ", 
        "three-leaf": "–¢—Ä–µ—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ –æ–∫–Ω–æ",
        "balcony-door": "–ë–∞–ª–∫–æ–Ω–Ω–∞—è –¥–≤–µ—Ä—å —Å –æ–∫–Ω–æ–º",
        "balcony-door-two-window": "–ë–∞–ª–∫–æ–Ω–Ω–∞—è –¥–≤–µ—Ä—å —Å –¥–≤—É–º—è –æ–∫–Ω–∞–º–∏",
        "other-type": "–î—Ä—É–≥–æ–π —Ç–∏–ø –æ–∫–Ω–∞"
      };
      
      return `–û–∫–Ω–æ #${index + 1}:
–¢–∏–ø: ${windowTypeNames[window.windowType as keyof typeof windowTypeNames] || window.windowType}
–†–∞–∑–º–µ—Ä—ã: ${window.dimensions.width}–º–º x ${window.dimensions.height}–º–º
–û–ø—Ü–∏–∏: ${window.options.length > 0 ? window.options.join(", ") : "–ù–µ—Ç"}`;
    }).join("\n\n");
  };

  const handleWhatsAppSend = () => {
    // Validate all windows
    for (let i = 0; i < windows.length; i++) {
      if (!windows[i].windowType) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–∫–Ω–∞ #${i + 1}`,
          variant: "destructive"
        });
        return;
      }

      if (!windows[i].dimensions.width || !windows[i].dimensions.height) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ #${i + 1}`,
          variant: "destructive"
        });
        return;
      }
    }
    
    if (!contactInfo.name || !contactInfo.phone || !contactInfo.consent) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    const windowsData = formatWindowsData();
    const whatsappText = `–ò–º—è: ${contactInfo.name}%0A–¢–µ–ª–µ—Ñ–æ–Ω: ${contactInfo.phone}%0A–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –†–∞—Å—á–µ—Ç –æ–∫–æ–Ω:%0A${encodeURIComponent(windowsData)}`;
    const whatsappUrl = `https://wa.me/375293423221?text=${whatsappText}`;
    window.open(whatsappUrl, '_blank');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate all windows
    for (let i = 0; i < windows.length; i++) {
      if (!windows[i].windowType) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–∫–Ω–∞ #${i + 1}`,
          variant: "destructive"
        });
        return;
      }

      if (!windows[i].dimensions.width || !windows[i].dimensions.height) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ #${i + 1}`,
          variant: "destructive"
        });
        return;
      }
      
      if (windows[i].windowType === "other-type" && !windows[i].options.includes("description")) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–û–ø–∏—à–∏—Ç–µ –æ–∫–Ω–æ #${i + 1}`,
          variant: "destructive"
        });
        return;
      }
    }
    
    if (!contactInfo.name || !contactInfo.phone || !contactInfo.consent) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);
    
    const windowsData = formatWindowsData();
    const telegramMessage = `üè† –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç –æ–∫–æ–Ω\n\nüë§ –ò–º—è: ${contactInfo.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${contactInfo.phone}\n\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫–æ–Ω:\n${windowsData}`;

    try {
      const response = await fetch(`https://api.telegram.org/bot8134015742:AAHoX9DetuDOJdEzqjL5yieReKg3oayxonA/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          chat_id: "277234658",
          text: telegramMessage
        })
      });

      if (response.ok) {
        toast({
          title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
          description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        });
        
        // Reset form
        setWindows([{
          windowType: "",
          frameTypes: [],
          dimensions: { width: "", height: "" },
          options: []
        }]);
        setContactInfo({ name: "", phone: "", consent: false });
      } else {
        throw new Error('Failed to send message');
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="bg-white p-8 rounded-lg shadow-sm">
        {windows.map((window, windowIndex) => (
          <WindowConfigurationItem
            key={windowIndex}
            windowIndex={windowIndex}
            window={window}
            onWindowChange={handleWindowChange}
          />
        ))}

        <div className="mb-8 flex justify-center">
          <button
            type="button"
            onClick={addWindow}
            className="px-8 py-3 bg-brand-orange text-white rounded-md hover:bg-[#e69816] transition-colors"
          >
            –î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–æ
          </button>
        </div>
        
        <ContactInfoForm 
          contactInfo={contactInfo}
          onContactInfoChange={handleContactInfoChange}
        />

        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-8 py-3 bg-brand-orange text-white rounded-md hover:bg-[#e69816] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
          </button>
          
          <button
            type="button"
            onClick={handleWhatsAppSend}
            className="px-8 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-2"
          >
            <img 
              src="/lovable-uploads/653de03b-05d0-4cd5-b6bf-515fa14a31d6.png" 
              alt="WhatsApp" 
              className="w-5 h-5" 
            />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
          </button>
        </div>
      </div>
    </form>
  );
};

export default WindowConfigurationForm;
